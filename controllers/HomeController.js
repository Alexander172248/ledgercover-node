let View = require('../views/base');
let path = require('path');
let fs = require('fs');
let config = require('../config')();
let crypto = require('crypto');
let ejs = require('ejs');
const nodemailer = require('nodemailer');
let transporter = nodemailer.createTransport({
    host: config.mail.host,
    port: config.mail.port,
    secure: true,
    auth: {
        user: config.mail.name,
        pass: config.mail.pass,
    },
});

let BaseController = require('./BaseController');
let Api = require('./ApiController');
let User = require('../models/User').User;
let publicAbsPath = path.join(__dirname, '../public');
let stripe = require('stripe')(config.stripe_test_sec);

module.exports = BaseController.extend({
    name: 'AuthController',
    getHome: async function (req, res, next) {
        let v = new View(res, 'urbanui/pages/home');
        v.render({
            title: 'Home',
            session: req.session,
            i18n: res,
            side: "home",
            sub_side: "",
        })
    },
    getApp: async function (req, res, next) {
        let v = new View(res, 'urbanui/pages/app');
        v.render({
            title: 'Download App',
            session: req.session,
            i18n: res,
            side: "app",
            sub_side: "download",
        })
    },
    getFreeRiskAssessmentPost: async function (req, res, next) {
        if (req.method === 'POST') {
            let methodType = req.body.method_type;
            if (methodType === 'risk-api') {
                let riskName = req.body.riskName;
                let riskEmail = req.body.riskEmail;
                let riskPassword = req.body.riskPassword;
                let riskDomain = req.body.riskDomain;
                let riskIndustry = req.body.riskIndustry;
                let riskEmployees = req.body.riskEmployees;
                let riskPhone = req.body.riskPhone;
                let checkUser = await User.findOne({email: riskEmail});
                if (!checkUser) {
                    // let password = this.generateEmailCode(11);
                    console.log("Email: ", riskEmail, "Password: ", riskPassword);
                    let created_at = new Date();
                    let newUser = new User({
                        name: riskName,
                        email: riskEmail,
                        phone: riskPhone,
                        address: '',
                        password: crypto.createHash('md5').update(riskPassword).digest('hex'),
                        role: 2,
                        avatar: '/assets/images/faces/face2.jpg',
                        email_verify_flag: 2,
                        email_verify_token: '',
                        phone_verify_flag: 2,
                        phone_verify_token: '',
                        factor2_flag: 2,
                        reset_flag: 2,
                        industry: riskIndustry,
                        employee: riskEmployees,
                        created_at: created_at,
                        updated_at: created_at
                    });
                    await newUser.save();
                    // sending mail with password

                    let info = await transporter.sendMail({
                        from: '"Ledger Cover" <' + config.mail.name + '>',
                        to: riskEmail,
                        subject: 'Registration Success',
                        html: '<h4>Password is generated by LedgerCover</h4><h3 style="color: orangered">' + password + '</h3>'
                    });
                    console.log("get risk assessment...");
                    console.log(info);
                }
                let apiRiskRes = await Api.api_get_risk(riskDomain);
                if (apiRiskRes.status === 'success') {
                    if (apiRiskRes.data.code == 403) return res.send({status: 'error', message: res.cookie().__('Risk Api Error')});
                    else return res.send({status: 'success', message: res.cookie().__('Risk Api Success'), data: apiRiskRes.data});
                } else {
                    return res.send({status: 'error', message: res.cookie().__('Risk Api Error')});
                }
            } else if (methodType === 'risk-mailing') {
                let report_name = req.body.report_name;
                let report_email = req.body.report_email;
                let report_domain = req.body.report_domain;
                let report_password = req.body.report_password;
                let report_industry = req.body.report_industry;
                let report_employees = req.body.report_employees;
                let report_phone = req.body.report_phone;
                let checkUser = await User.findOne({email: report_email});
                if (!checkUser) {
                    // let password = this.generateEmailCode(11);
                    console.log("Email: ", riskEmail, "Password: ", report_password);
                    let created_at = new Date();
                    let newUser = new User({
                        name: report_name,
                        email: report_email,
                        phone: report_phone,
                        address: '',
                        password: crypto.createHash('md5').update(report_password).digest('hex'),
                        role: 2,
                        avatar: '/assets/images/faces/face2.jpg',
                        email_verify_flag: 2,
                        email_verify_token: '',
                        phone_verify_flag: 2,
                        phone_verify_token: '',
                        factor2_flag: 2,
                        reset_flag: 2,
                        industry: report_industry,
                        employee: report_employees,
                        created_at: created_at,
                        updated_at: created_at
                    });
                    await newUser.save();
                }
                let html = '<h4>Name: ' + report_name + '</h4><h4>Website: ' + report_domain + '</h4>';
                html += '<p>Dear LedgerCover Team,</p>';
                html += '<p>I would like to protect my assets and be an early customer to the Cyber Insurance product at a preferential rate when the product is available Fall 2020.</p>';
                html += '<p>Thank you</p>';
                html += '<p>Please keep me informed by email</p>';
                html += '<p>Date: ' + new Date().toISOString().substr(0, 10) + '</p>';
                html += '<h4>Signature: ' + report_name + '</h4>';

                let info = await transporter.sendMail({
                    from: '"Customer" <' + report_email + '>',
                    to: config.mail.name,
                    subject: 'LETTER OF INTENT',
                    html: html,
                });
                console.log("Sending mail ...");
                console.log(info);
                return res.send({status: 'success', message: res.cookie().__('Mail is sent successfully')});
            } else return res.send({status: 'error', message: res.cookie().__('Unknown method')});
        } else {
            return res.redirect('/404');
        }
    },
    getFreeRiskAssessment: async function (req, res, next) {
        let v = new View(res, 'urbanui/pages/risk-assessment');
        v.render({
            title: 'Risk Assets',
            session: req.session,
            i18n: res,
            side: "risk-assessment",
            sub_side: "",
        })
    },
    getCyberAttackTypes: async function (req, res, next) {
        let v = new View(res, 'urbanui/pages/attack-types');
        v.render({
            title: 'Home',
            session: req.session,
            i18n: res,
            side: "resources",
            sub_side: "attack-types",
        })
    },
    getCyberSecutiry: async function (req, res, next) {
        let v = new View(res, 'urbanui/pages/security');
        v.render({
            title: 'CyberSecurity Insurance',
            session: req.session,
            i18n: res,
            side: "risk-management",
            sub_side: "security",
        })
    },
    getCyber: async function (req, res, next) {
        let v = new View(res, 'urbanui/pages/insurance');
        v.render({
            title: 'CyberSecurity Insurance',
            session: req.session,
            i18n: res,
            side: "risk-management",
            sub_side: "cyber",
        })
    },
    getProcess: async function (req, res, next) {
        let v = new View(res, 'urbanui/pages/process');
        v.render({
            title: 'Privacy',
            session: req.session,
            i18n: res,
            side: "risk-management",
            sub_side: "process",
        })
    },
    getTeam: async function (req, res, next) {
        let v = new View(res, 'urbanui/pages/team');
        v.render({
            title: 'Privacy',
            session: req.session,
            i18n: res,
            side: "about",
            sub_side: "team",
        })
    },
    getContactUs: async function (req, res, next) {
        let v = new View(res, 'urbanui/pages/contact');
        v.render({
            title: 'Privacy',
            session: req.session,
            i18n: res,
            side: "about",
            sub_side: "contact",
        })
    },
    getSummits: async function (req, res, next) {
        let v = new View(res, 'urbanui/pages/summits');
        v.render({
            title: 'Privacy',
            session: req.session,
            i18n: res,
            side: "about",
            sub_side: "summits",
        })
    },
    postContact: async function (req, res, next) {
        if (req.body.type === "home") {
            let name = req.body.name;
            let email = req.body.email;
            let domain = req.body.domain;
            let phone = req.body.phone;
            let company = req.body.company;
            let info = await transporter.sendMail({
                from: '"' + name + '" <' + email + '>',
                to: config.mail.name,
                subject: 'Contact for learn more',
                html: '<h4>Domain: ' + domain +'</h4><h4>Phone: ' + phone +'</h4><h4>Company: ' + company +'</h4>'
            });
            console.log("Submit contact on home...");
            console.log(info);
            return res.send({status: 'success', message: res.cookie().__('Mail is sent successfully')});
        }
        else if (req.body.type === "contact") {
            let name = req.body.name;
            let email = req.body.email;
            let address = req.body.address;
            let message = req.body.message;
            let info = await transporter.sendMail({
                from: '"' + name + '" <' + email + '>',
                to: config.mail.name,
                subject: 'Contact for learn more',
                html: '<h4>Address: ' + address +'</h4><h4>' + message +'</h4>'
            });
            console.log("Submit contact on home...");
            console.log(info);
            return res.send({status: 'success', message: res.cookie().__('Mail is sent successfully')});
        }
        else return res.send({status: "error", message: "Unknown method"});
    },
    postCheckOut: async function (req, res, next) {
        let card_number = req.body.card_number;
        let card_expire = req.body.card_expire;
        let card_cvc = req.body.card_cvc;
        let amount = req.body.amount;
        stripe.tokens.create({
            card: {
                number: card_number,
                exp_month: card_expire.split("/")[0],
                exp_year: card_expire.split("/")[1],
                cvc: card_cvc,
            }
        }).then((cardToken)=>{
            console.log("Card Success: ", cardToken);
            return res.send({status: 'success', message: "You subscribed successfully"});
        }).catch((cardError)=>{
            console.log("Card Error: ", cardError);
            return res.send({status: 'error', message: cardError.message});
        })
    },
});
